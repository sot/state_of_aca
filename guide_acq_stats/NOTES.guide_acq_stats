###############################################################
## Empirical fit for scale vs. mag
###############################################################

In [20]: dat = ascii.read('gui_warm_fit.dat')
In [15]: dat.add_column(astropy.table.Column(name='log_scale', data=np.log10(dat['scale'])))

In [16]: print dat
mag0 mag1    mag_mean        scale         scale_parmin     scale_parmax      log_scale   
---- ---- ------------- --------------- ----------------- ---------------- ---------------
 8.0  8.5 8.26152386102 0.0375779386795  -0.0181720684353  0.0181720684353  -1.42506704661
 8.5  9.0 8.76659167599 0.0277645956199 -0.00783162152766 0.00783162152766  -1.55650864747
 9.0  9.5 9.23852675457 0.0941686518834  -0.0228965507838  0.0228965507838  -1.02609364689
 9.5 10.0 9.72483536971  0.427012480135  -0.0342288904103  0.0342288904103 -0.369559431826
10.0 10.5 10.2002707268   1.25558251533   -0.126002145692   0.126002145692  0.098845259283
10.5 11.0 10.6113490023    4.1549611827   -0.500526231753   0.500526231753  0.618566970787

In [17]: dat2 = dat[1:]

In [19]: np.polyfit(dat2['mag_mean'], dat2['log_scale'], 1)
Out[19]: array([  1.17717955, -11.87537947])

** ANSWER **
  scale = 10 ** (1.18 * (mag - 10.09))

In [21]: plot(dat['mag_mean'], 10 ** ((dat['mag_mean'] - 10.09) * 1.18))
Looks good.
